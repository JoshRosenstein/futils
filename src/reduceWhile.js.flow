// @flow
//https://github.com/flow-typed/flow-typed/blob/master/definitions/npm/ramda_v0.x.x/flow_v0.82.x-/ramda_v0.x.x.js

import type {Property} from './_types/flow/$types'


declare var reduceWhile_: ReduceWhile_
declare var reduceWhile: ReduceWhile

export {reduceWhile_, reduceWhile}
declare export default ReduceWhile

/// TODO: Object,Map, Set types
export type ReduceWhile_=(<A, B>(pred: (acc: A, curr: B) => boolean,
fn: (a: A, b: B) => A)=>((init: A) => (xs: Array<B>) => A) &
((init: A, xs: Array<B>) => A)) & (<A, B>(
  fn: (acc: A, curr: B) => boolean,
  fn: (a: A, b: B) => A,
  init: A,
  xs: Array<B>
)=> A)

/// TODO: Object,Map, Set types
export type ReduceWhile= ReduceWhile_ & (
  <A, B>(pred: (acc: A, curr: B) => boolean)=> ((
    fn: (a: A, b: B) => A,
  ) => (init: A) => (
    xs: Array<B>
  ) => A &
    ((
      fn: (a: A, b: B) => A,
    ) => (init: A, xs: Array<B>) => A)) &
    ((
      fn: (a: A, b: B) => A,
      init: A,
    ) => (xs: Array<B>) => A) &
    ((fn: (a: A, b: B) => A, init: A, xs: Array<B>) => A)
)

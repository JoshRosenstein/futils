// @flow
type Record<K,T>={[K]:T}
export type ToPairs = ToPairs_
export  type ToPairs_ = ((und:void)=> []) &
((string:string)=> Array<[number,string]>) &
(<T>(array:T[])=> Array<[number,T]>) &
(<T, K : string> (Object:Record<K, T>)=>Array<[K,T]>) &
(<T>(set:Set<T>)=> Array<[T,T]>) &
(<T, K> (map:Map<K,T>)=>Array<[K,T]>) &
(<T, K : string> (objectOrString:Record<K, T>|string)=>Array<[K,T]>| Array<[number,string]>) &
(<T, K : string> (value: string |T[] |Set<T>|Map<K,T>| Record<K, T>)=> Array<[string,T]> | Array<[number,string]> | Array<[T,T]> | Array<[K,T]>)


declare var toPairs_: ToPairs_
declare var toPairs: ToPairs

export {toPairs_, toPairs}
declare export default ToPairs

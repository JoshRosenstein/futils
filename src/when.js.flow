// @flow
import type {Morphism, Predicate} from './_types/flow/$types'

export type When_ =   <T, U>(pred: Predicate<T>, whenTrueFn: Morphism<T, U>, value: T)=> when_111<T, U>;

export type When = (<T>(pred: Predicate<T>)=> when_100<T>) &
  (<T, U>(pred: Predicate<T>, whenTrueFn: Morphism<T, U>)=> when_110<T, U>) & When_



declare var when_: When_
declare var when: When

export {when_, when}
declare export default When

type when_100<T> =(<U>(whenTrueFn: Morphism<T, U>)=> when_110<T, U>) &
(<U>(whenTrueFn: Morphism<T, U>, value: T)=> when_111<T, U>)

type when_110<T, U> = (value: T)=> when_111<T, U>;

type when_111<T, U> = T | U;
